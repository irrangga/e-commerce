// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/order/init.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/order/init.go -destination ./gen/mocken/usecase/order/mock.go
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	entity "e-commerce/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepoInterface) CreateOrder(ctx context.Context, input entity.CreateOrder) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, input)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepoInterfaceMockRecorder) CreateOrder(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepoInterface)(nil).CreateOrder), ctx, input)
}

// CreateProductOrders mocks base method.
func (m *MockRepoInterface) CreateProductOrders(ctx context.Context, input entity.CreateOrder) ([]entity.ProductOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductOrders", ctx, input)
	ret0, _ := ret[0].([]entity.ProductOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductOrders indicates an expected call of CreateProductOrders.
func (mr *MockRepoInterfaceMockRecorder) CreateProductOrders(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductOrders", reflect.TypeOf((*MockRepoInterface)(nil).CreateProductOrders), ctx, input)
}

// DeleteOrder mocks base method.
func (m *MockRepoInterface) DeleteOrder(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockRepoInterfaceMockRecorder) DeleteOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockRepoInterface)(nil).DeleteOrder), ctx, id)
}

// DeleteProductOrderByOrderId mocks base method.
func (m *MockRepoInterface) DeleteProductOrderByOrderId(ctx context.Context, orderId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductOrderByOrderId", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductOrderByOrderId indicates an expected call of DeleteProductOrderByOrderId.
func (mr *MockRepoInterfaceMockRecorder) DeleteProductOrderByOrderId(ctx, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductOrderByOrderId", reflect.TypeOf((*MockRepoInterface)(nil).DeleteProductOrderByOrderId), ctx, orderId)
}

// GetOrder mocks base method.
func (m *MockRepoInterface) GetOrder(ctx context.Context, id string) (entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepoInterfaceMockRecorder) GetOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepoInterface)(nil).GetOrder), ctx, id)
}
