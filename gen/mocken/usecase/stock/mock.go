// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/stock/init.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/stock/init.go -destination ./gen/mocken/usecase/stock/mock.go
//

// Package mock_stock is a generated GoMock package.
package mock_stock

import (
	context "context"
	entity "e-commerce/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateStock mocks base method.
func (m *MockRepoInterface) CreateStock(ctx context.Context, input entity.CreateStock) (entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStock", ctx, input)
	ret0, _ := ret[0].(entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStock indicates an expected call of CreateStock.
func (mr *MockRepoInterfaceMockRecorder) CreateStock(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStock", reflect.TypeOf((*MockRepoInterface)(nil).CreateStock), ctx, input)
}

// DeleteStocksByProductId mocks base method.
func (m *MockRepoInterface) DeleteStocksByProductId(ctx context.Context, productId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStocksByProductId", ctx, productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStocksByProductId indicates an expected call of DeleteStocksByProductId.
func (mr *MockRepoInterfaceMockRecorder) DeleteStocksByProductId(ctx, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStocksByProductId", reflect.TypeOf((*MockRepoInterface)(nil).DeleteStocksByProductId), ctx, productId)
}

// GetStocksByProductId mocks base method.
func (m *MockRepoInterface) GetStocksByProductId(ctx context.Context, productId string) ([]entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocksByProductId", ctx, productId)
	ret0, _ := ret[0].([]entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStocksByProductId indicates an expected call of GetStocksByProductId.
func (mr *MockRepoInterfaceMockRecorder) GetStocksByProductId(ctx, productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocksByProductId", reflect.TypeOf((*MockRepoInterface)(nil).GetStocksByProductId), ctx, productId)
}

// UpdateStock mocks base method.
func (m *MockRepoInterface) UpdateStock(ctx context.Context, input entity.UpdateStock) (entity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ctx, input)
	ret0, _ := ret[0].(entity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockRepoInterfaceMockRecorder) UpdateStock(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockRepoInterface)(nil).UpdateStock), ctx, input)
}
